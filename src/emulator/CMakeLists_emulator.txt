project(jbpf_emulator)

option(JBPF_STATIC "Use jbpf as static library" OFF)

if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
SET(CMAKE_CXX_FLAGS "-std=c++17")

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -UNDEBUG")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -UNDEBUG")

## require ENV JBPF_PATH
if(NOT DEFINED ENV{JBPF_PATH})
    message(FATAL_ERROR "Please set the environment variable JBPF_PATH to the jbpf directory")
endif()

set(JBPF_PATH $ENV{JBPF_PATH})

set(JBPF_EMULATOR jbpf_emulator)
set(JBPF_EMULATOR_SRC_DIR ${PROJECT_SOURCE_DIR})
set(JBPF_EMULATOR_SOURCES ${JBPF_EMULATOR_SRC_DIR}/emulator.cpp ${JBPF_PATH}/src/core/jbpf_helper_impl.h)

## require ENV JBPF_OUT_DIR
if(NOT DEFINED ENV{JBPF_OUT_DIR})
    message(FATAL_ERROR "Please set the environment variable JBPF_OUT_DIR to the output directory")
endif()

set(JBPF_OUT_DIR $ENV{JBPF_OUT_DIR})

find_package(Python COMPONENTS Interpreter Development REQUIRED)

message(STATUS "Python_EXECUTABLE: ${Python_EXECUTABLE}")
message(STATUS "Python_VERSION: ${Python_VERSION}")
message(STATUS "Python_INCLUDE_DIRS: ${Python_INCLUDE_DIRS}")
message(STATUS "Python_LIBRARIES: ${Python_LIBRARIES}")
set(Python3_LINK_OPTIONS "-lpython${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}")
message(STATUS "Python3_LINK_OPTIONS: ${Python3_LINK_OPTIONS}")

include_directories(${Python_INCLUDE_DIRS})

add_executable(${JBPF_EMULATOR} ${JBPF_EMULATOR_SOURCES})
target_include_directories(${JBPF_EMULATOR} PUBLIC 
    ${JBPF_EMULATOR_HEADERS} 
    ${JBPF_OUT_DIR}/inc
    ${JBPF_OUT_DIR}/emulator/test
    ${JBPF_PATH}/src/logger
    ${JBPF_PATH}/src/core
    ${JBPF_PATH}/jbpf_tests/common
    ${UBPF_INCLUDE_DIRS}
    ${JBPF_LOGGER_HEADERS}
)

target_link_options(${JBPF_EMULATOR} PUBLIC ${Python3_LINK_OPTIONS} "-lpthread" "-ldl" "-lrt")

add_dependencies(${JBPF_EMULATOR} jbpf::core_lib jbpf::logger_lib jbpf::mem_mgmt_lib jbpf_verifier jbpf_io generate_hook_wrappers)

# Define the common libraries
set(COMMON_LIBS
    ${JBPF_OUT_DIR}/lib/libjbpf_io.a
    ${JBPF_OUT_DIR}/lib/libjbpf_mem_mgmt.a
    ${JBPF_OUT_DIR}/lib/libjbpf_verifier.a
    ${JBPF_OUT_DIR}/lib/libubpf.a
    ${JBPF_OUT_DIR}/lib/libck.a
    pthread
    dl
    rt    
    ${Python_LIBRARIES}
)

#if (JBPF_STATIC)

    MESSAGE(STATUS "Linking the the emulator to libjbpf.a")
    target_link_libraries(${JBPF_EMULATOR} PUBLIC
        ${JBPF_OUT_DIR}/lib/libjbpf.a
        ${COMMON_LIBS}        
    )

#else()
#    MESSAGE(FATAL_ERROR "Linking the emulator to libjbpf.so may not work as expected for report_stats and periodic_call hooks.")
#    target_link_libraries(${JBPF_EMULATOR} PUBLIC
#        ${JBPF_OUT_DIR}/lib/libjbpf.so
#        ${COMMON_LIBS}        
#    )
#endif()

set_target_properties(${JBPF_EMULATOR}
    PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${JBPF_OUT_DIR}/bin"
)

# generate "auto-generated-hook-wrappers.hpp", this should be before the build
add_custom_target(generate_hook_wrappers ALL
    COMMAND echo "Generating hook wrappers: auto_generated_hooks_wrapper.hpp..."
    COMMAND python3 ${JBPF_EMULATOR_SRC_DIR}/autogen-hook-wrappers.py ${JBPF_PATH}/jbpf_tests/common/jbpf_agent_common.h > ${JBPF_OUT_DIR}/inc/auto_generated_hooks_wrapper.hpp
    ## remove the lines that start with "DEFINE_JBPF_"
    COMMAND sed -i '/^DEFINE_JBPF_/d' ${JBPF_OUT_DIR}/inc/auto_generated_hooks_wrapper.hpp
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Generating hook wrappers: auto_generated_hooks_wrapper..."
)
