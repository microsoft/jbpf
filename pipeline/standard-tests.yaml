parameters:
  - name: dockerType
    type: string
  - name: testCase
    type: object

steps:
  - bash: |
      docker tag $(containerRegistry)/jbpf-lib-${{ parameters.dockerType }}:$(imageTag) jbpf_lib
    displayName: Prepare images
    failOnStderr: true
    continueOnError: false

  - bash: |
      echo ${{ parameters.testCase.description }}
      echo staticBuildParam: ${{ parameters.testCase.staticBuildParam }}
      echo sanitizerBuildParam: ${{ parameters.testCase.sanitizerBuildParam }}
    displayName: Display build parameters
    failOnStderr: true
    continueOnError: false

  - bash: |
      echo [PIPELINE]: Test Build Configurations
      cd ./helper_build_files
      if ! /bin/bash ./test_build_utils.sh; then
        echo Error !
        exit 1
      fi
    displayName: "Test Build Configurations"
    continueOnError: false
    failOnStderr: true

  - bash: |
      set -ex
      docker run -v `pwd`:/jbpf_out_lib ${{parameters.testCase['sanitizerBuildParam']}} ${{parameters.testCase['staticBuildParam']}} jbpf_lib
    displayName: Build container
    continueOnError: false

  - bash: |
      set -ex
      echo "#!/bin/bash" > /tmp/build.sh
      echo "set -ex" >> /tmp/build.sh
      echo "cd /jbpf/jbpf_tests/test_files/codelets/" >> /tmp/build.sh
      echo "make clean" >> /tmp/build.sh
      echo "make" >> /tmp/build.sh
      chmod +x /tmp/build.sh
      docker run -e JBPF_PATH=/jbpf -v /tmp/build.sh:/tmp/build.sh -v `pwd`:/jbpf_out_lib ${{parameters.testCase['sanitizerBuildParam']}} ${{parameters.testCase['staticBuildParam']}} --entrypoint=/tmp/build.sh jbpf_lib

    displayName: Build codelets /jbpf_tests/test_files
    continueOnError: false

  - bash: |
      set -ex
      echo "#!/bin/bash" > /tmp/build.sh
      echo "set -ex" >> /tmp/build.sh
      echo "cd /jbpf/tools/stats_report/" >> /tmp/build.sh
      echo "make clean" >> /tmp/build.sh
      echo "make" >> /tmp/build.sh
      chmod +x /tmp/build.sh
      docker run -e JBPF_PATH=/jbpf -v /tmp/build.sh:/tmp/build.sh -v `pwd`:/jbpf_out_lib ${{parameters.testCase['sanitizerBuildParam']}} ${{parameters.testCase['staticBuildParam']}} --entrypoint=/tmp/build.sh jbpf_lib

    displayName: Build codelets /tools/stats_report
    continueOnError: false

  - bash: |
      set -x
      docker run --init --privileged --network host --cap-add=SYS_ADMIN --shm-size=1g --mount type=tmpfs,destination=/dev/shm -v `pwd`:/jbpf_out_lib -v `pwd`/build:/jbpf/build ${{parameters.testCase['sanitizerBuildParam']}} ${{parameters.testCase['staticBuildParam']}} -e RUN_EMULATOR_TESTS=1 jbpf_lib

    displayName: Test Emulator
    continueOnError: false
    ## TODO: Fix ASAN issues
    condition: eq('${{parameters.testCase['sanitizerBuildParam']}}', '')

  - bash: |
      set -x
      docker run --init --privileged --network host --cap-add=SYS_ADMIN --shm-size=1g --mount type=tmpfs,destination=/dev/shm -v `pwd`:/jbpf_out_lib -v `pwd`/build:/jbpf/build ${{parameters.testCase['sanitizerBuildParam']}} ${{parameters.testCase['staticBuildParam']}} -e RUN_TESTS=1 jbpf_lib
      TEST_OUTCOME=$?
      cp ./build/Testing/Temporary/LastTest.log $(Build.ArtifactStagingDirectory)
      cp `pwd`/out/jbpf_tests.xml $(Build.ArtifactStagingDirectory)
      if [ "$TEST_OUTCOME" != "0" ]; then
        echo Error running "make test, result code is $TEST_OUTCOME"
        echo Please view the log from published artifacts: ./build/Testing/Temporary/LastTest.log
        exit 1
      fi

    displayName: Make test
    continueOnError: false

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit" # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: "**/**/*_tests.xml"
      #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
      mergeTestResults: true # Optional
      failTaskOnFailedTests: true
    continueOnError: false

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      ArtifactName: artifacts
    continueOnError: true
